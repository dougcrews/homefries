---------- Metadata Convenience Views ----------

CREATE OR REPLACE VIEW public.all_views AS
SELECT table_catalog AS cat
     , table_schema AS schema
     , table_name AS name
     , check_option AS check
     , is_updatable AS update
     , is_insertable_into AS insert
     , is_trigger_updatable AS trig_update
     , is_trigger_deletable AS trig_delete
     , is_trigger_insertable_into AS trig_insert
     , view_definition
  FROM information_schema.views
 WHERE table_schema NOT IN ('information_schema', 'pg_catalog');

COMMIT;

CREATE OR REPLACE VIEW public.all_constraints AS
SELECT tc.table_name AS tab_name
     , kcu.column_name AS col_name
     , tc.constraint_name AS name
     , tc.constraint_type AS type
     , rc.update_rule AS on_update
     , rc.delete_rule AS on_delete
     , ccu.table_name AS references_table
     , ccu.column_name AS references_field
     , cc.check_clause
     , tc.is_deferrable
     , tc.initially_deferred
     , rc.match_option AS match_type
  FROM information_schema.table_constraints tc
  LEFT JOIN information_schema.key_column_usage kcu
    ON tc.constraint_catalog = kcu.constraint_catalog
   AND tc.constraint_schema = kcu.constraint_schema
   AND tc.constraint_name = kcu.constraint_name
  LEFT JOIN information_schema.referential_constraints rc
    ON tc.constraint_catalog = rc.constraint_catalog
   AND tc.constraint_schema = rc.constraint_schema
   AND tc.constraint_name = rc.constraint_name
  LEFT JOIN information_schema.constraint_column_usage ccu
    ON rc.unique_constraint_catalog = ccu.constraint_catalog
   AND rc.unique_constraint_schema = ccu.constraint_schema
   AND rc.unique_constraint_name = ccu.constraint_name
  LEFT JOIN information_schema.check_constraints cc
    ON cc.constraint_catalog = tc.constraint_catalog
   AND cc.constraint_schema = tc.constraint_schema
   AND cc.constraint_name = tc.constraint_name
 ORDER BY tc.table_name, tc.constraint_name;

--SELECT * FROM information_schema.check_constraints ORDER BY constraint_catalog, constraint_schema, constraint_name;
CREATE OR REPLACE VIEW public.all_check_constraints AS
SELECT constraint_catalog AS cat
     , constraint_schema AS schema
     , constraint_name AS name
     , check_clause AS constraint
  FROM information_schema.check_constraints;

CREATE OR REPLACE VIEW public.all_chk_cons AS
SELECT constraint_catalog AS cat
     , constraint_schema AS schema
     , constraint_name AS name
     , SUBSTR(check_clause, 1, 60) AS constraint
  FROM information_schema.check_constraints;
--SELECT * FROM information_schema.column_domain_usage;
--SELECT * FROM information_schema.column_privileges ORDER BY grantee, table_catalog, table_schema, table_name, column_name, privilege_type;

CREATE OR REPLACE VIEW public.all_column_privileges AS
SELECT grantee
     , table_catalog AS cat
     , table_schema AS schema
     , table_name AS tab_name
     , column_name AS col_name
     , privilege_type AS type
     , grantor
     , is_grantable AS with_grant
  FROM information_schema.column_privileges;

CREATE OR REPLACE VIEW public.all_col_privs AS
SELECT grantee
     , table_catalog AS cat
     , table_schema AS schema
     , table_name AS tab_name
     , column_name AS col_name
     , privilege_type AS type
     , grantor
     , is_grantable AS with_grant
  FROM information_schema.column_privileges;
--SELECT * FROM information_schema.column_udt_usage;
--SELECT * FROM information_schema.columns ORDER BY table_catalog, table_schema, table_name, column_name, ordinal_position;

CREATE OR REPLACE VIEW public.all_table_columns AS
SELECT table_catalog AS cat
     , table_schema AS schema
     , table_name AS tab_name
     , column_name AS col_name
     , ordinal_position AS col_num
     , data_type AS data_type
     , character_maximum_length AS char_len
     , numeric_precision AS precision
     , numeric_precision_radix AS radix
     , column_default AS default
     , is_nullable AS null_ok
  FROM information_schema.columns;

CREATE OR REPLACE VIEW public.all_tab_cols AS
SELECT table_catalog AS cat
     , table_schema AS schema
     , table_name AS tab_name
     , column_name AS col_name
     , ordinal_position AS col_num
     , data_type AS data_type
     , character_maximum_length AS char_len
     , numeric_precision AS precision
     , numeric_precision_radix AS radix
     , column_default AS default
     , is_nullable AS null_ok
  FROM information_schema.columns;
--SELECT * FROM information_schema.constraint_column_usage;
--SELECT * FROM information_schema.constraint_table_usage;
--SELECT * FROM information_schema.data_type_privileges;
--SELECT * FROM information_schema.domain_constraints ORDER BY constraint_catalog, constraint_schema, constraint_name;

CREATE OR REPLACE VIEW public.all_domain_constraints AS
SELECT constraint_catalog AS cat
     , constraint_schema AS schema
     , constraint_name AS name
     , domain_catalog || '.' || domain_schema || '.' || domain_name AS constraint
  FROM information_schema.domain_constraints;

CREATE OR REPLACE VIEW public.all_domain_cons AS
SELECT constraint_catalog AS cat
     , constraint_schema AS schema
     , constraint_name AS name
     , domain_catalog || '.' || domain_schema || '.' || domain_name AS constraint
  FROM information_schema.domain_constraints;
--SELECT * FROM information_schema.domain_udt_usage;
--SELECT * FROM information_schema.domains ORDER BY domain_catalog, domain_schema, domain_name;

CREATE OR REPLACE VIEW public.all_domains AS
SELECT domain_catalog AS cat
     , domain_schema AS schema
     , domain_name AS name
     , data_type
     , character_maximum_length AS max_chars
     , character_set_catalog || '.' || character_set_schema || '.' || character_set_name AS char_set
     , collation_catalog || '.' || collation_schema || '.' || collation_name AS collation_name
     , numeric_precision || '.' || numeric_scale || ' (Base ' || numeric_precision_radix || ')' AS precision
     , datetime_precision
     , interval_type
     , interval_precision
     , domain_default
     , udt_catalog || '.' || udt_schema || '.' || udt_name AS udt
     , scope_catalog || '.' || scope_schema || '.' || scope_name AS scope
     , maximum_cardinality AS cardinality
     , dtd_identifier AS dtd_id
  FROM information_schema.domains;

CREATE OR REPLACE VIEW public.all_dom AS
SELECT domain_catalog AS cat
     , domain_schema AS schema
     , domain_name AS name
     , CASE
          WHEN data_type = 'character varying' THEN 'VARCHAR(' || COALESCE(TO_CHAR(character_maximum_length, '9'), 'MAX') || ')'
          WHEN data_type = 'integer' THEN 'INTEGER(' || numeric_precision || '.' || numeric_scale || ' B' || numeric_precision_radix || ')'
          WHEN data_type = 'timestamp with time zone' THEN 'DATETIME(TIMEZONE)'
          ELSE data_type
       END AS data_type
     , character_set_catalog || '.' || character_set_schema || '.' || character_set_name AS charset
--     , collation_catalog || '.' || collation_schema || '.' || collation_name AS coll
     , interval_type || '(' || interval_precision || ')' AS interval
     , CASE
          WHEN domain_default IS NOT NULL THEN '(yes)'
          ELSE 'NULL'
       END AS default
     , udt_catalog || '.' || udt_schema || '.' || udt_name AS udt
--     , scope_catalog || '.' || scope_schema || '.' || scope_name AS scope
--     , maximum_cardinality AS crd
     , dtd_identifier AS dtd_id
  FROM information_schema.domains;
--SELECT * FROM information_schema.element_types ORDER BY object_catalog, object_schema, object_name, object_type;

CREATE OR REPLACE VIEW public.all_element_types AS
SELECT object_catalog AS cat
     , object_schema AS schema
     , object_name AS name
     , object_type AS type
     , data_type
     , character_maximum_length AS max_chars
     , character_set_catalog || '.' || character_set_schema || '.' || character_set_name AS char_set
     , collation_catalog || '.' || collation_schema || '.' || collation_name AS collation
     , numeric_precision || '.' || numeric_scale || ' (Base ' || numeric_precision_radix || ')' AS precision
     , domain_default
     , udt_catalog || '.' || udt_schema || '.' || udt_name AS udt
     , scope_catalog || '.' || scope_schema || '.' || scope_name AS scope
     , maximum_cardinality AS cardinality
     , dtd_identifier AS dtd_id
  FROM information_schema.element_types;

CREATE OR REPLACE VIEW public.all_elem_types AS
SELECT object_catalog AS cat
     , object_schema AS schema
     , object_name AS name
     , object_type AS type
     , data_type
--     , character_maximum_length AS max_chars
--     , character_set_catalog || '.' || character_set_schema || '.' || character_set_name AS char_set
--     , collation_catalog || '.' || collation_schema || '.' || collation_name AS collation
--     , numeric_precision || '.' || numeric_scale || ' (Base ' || numeric_precision_radix || ')' AS precision
--     , domain_default
--     , udt_catalog || '.' || udt_schema || '.' || udt_name AS udt
--     , scope_catalog || '.' || scope_schema || '.' || scope_name AS scope
--     , maximum_cardinality AS cardinality
     , dtd_identifier AS dtd_id
  FROM information_schema.element_types;
--SELECT * FROM information_schema.enabled_roles;

CREATE OR REPLACE VIEW public.current_roles AS
SELECT role_name AS name
  FROM information_schema.enabled_roles;
--SELECT * FROM information_schema.information_schema_catalog_name;

CREATE OR REPLACE VIEW public.current_catalog AS
SELECT catalog_name AS name
  FROM information_schema.information_schema_catalog_name;
--SELECT * FROM information_schema.key_column_usage ORDER BY constraint_catalog, constraint_schema, constraint_name, table_catalog, table_schema, table_name, column_name, ordinal_position;

CREATE OR REPLACE VIEW public.all_constraint_columns AS
SELECT constraint_catalog AS cns_cat
     , constraint_schema AS cns_schema
     , constraint_name AS cns_name
     , table_catalog AS tab_cat
     , table_schema AS tab_schema
     , table_name AS tab_name
     , column_name AS col_name
     , ordinal_position AS col_num
     , position_in_unique_constraint
  FROM information_schema.key_column_usage;

CREATE OR REPLACE VIEW public.all_cons_cols AS
SELECT constraint_catalog AS cns_cat
     , constraint_schema AS cns_schema
     , constraint_name AS cns_name
     , table_catalog AS tab_cat
     , table_schema AS tab_schema
     , table_name AS tab_name
     , column_name AS col_name
     , ordinal_position AS col_num
--     , position_in_unique_constraint
  FROM information_schema.key_column_usage;
--SELECT * FROM information_schema.parameters;
--SELECT * FROM information_schema.referential_constraints ORDER BY constraint_name, constraint_catalog, constraint_schema;

CREATE OR REPLACE VIEW public.all_reference_constraints AS
SELECT constraint_catalog AS cat
     , constraint_schema AS schema
     , constraint_name AS name
     , unique_constraint_catalog || '.' || unique_constraint_schema || '.' || unique_constraint_name || ' (UPDATE=' || update_rule || ',DELETE=' || delete_rule || ',MATCH=' || match_option ||')' AS constraint
  FROM information_schema.referential_constraints;

CREATE OR REPLACE VIEW public.all_ref_cons AS
SELECT constraint_catalog AS cat
     , constraint_schema AS schema
     , SUBSTR(constraint_name, 1, 30) AS name
     , unique_constraint_catalog || '.' || unique_constraint_schema || '.' || unique_constraint_name || ' (UPDATE=' || update_rule || ',DELETE=' || delete_rule || ',MATCH=' || match_option ||')' AS constraint
  FROM information_schema.referential_constraints;
--SELECT * FROM information_schema.role_column_grants;
-- See also routine_privileges. This is by group, not user.
--SELECT * FROM information_schema.role_routine_grants ORDER BY grantee, specific_catalog, specific_schema, specific_name;

CREATE OR REPLACE VIEW public.all_indexes AS
SELECT n.nspname AS schema_name
     , t.relname AS table_name
     , c.relname AS index_name
     , pg_catalog.pg_table_is_visible(c.oid) AS visible
     , pg_get_indexdef(indexrelid) AS def
     , ARRAY_TO_STRING(ARRAY_AGG(a.attname), ', ') AS column_names
  FROM pg_catalog.pg_class c
  JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
  JOIN pg_catalog.pg_index i ON i.indexrelid = c.oid
  JOIN pg_catalog.pg_class t ON i.indrelid = t.oid
  JOIN pg_catalog.pg_attribute a ON a.attrelid = c.oid
   AND a.attnum = ANY(i.indkey)
 WHERE n.nspname NOT IN ('pg_catalog', 'pg_toast', 'information_schema')
   AND pg_catalog.pg_table_is_visible(c.oid) IS TRUE
 GROUP BY n.nspname, t.relname, c.relname, pg_catalog.pg_table_is_visible(c.oid), pg_get_indexdef(indexrelid);

CREATE OR REPLACE VIEW public.all_partitioned_tables AS
SELECT pgn2.nspname AS table_schema
     , pgc2.relname AS parent_table_name
     , pgc.relname AS child_table_name
  FROM pg_class pgc
  JOIN pg_namespace pgn ON pgc.relnamespace = pgn.oid
  JOIN pg_inherits pgi ON pgi.inhrelid = pgc.oid
  JOIN pg_class pgc2 ON pgi.inhparent = pgc2.oid
  JOIN pg_namespace pgn2 ON pgc2.relnamespace = pgn2.oid;

CREATE OR REPLACE VIEW public.all_procedure_privileges AS
SELECT grantee
     , specific_catalog AS spec_cat
     , specific_schema AS spec_schema
     , specific_name AS spec_name
     , routine_catalog AS proc_cat
     , routine_schema AS proc_schema
     , routine_name AS proc_name
     , privilege_type AS type
     , grantor
     , is_grantable AS with_grant
  FROM information_schema.role_routine_grants
 UNION
SELECT grantee
     , specific_catalog AS spec_cat
     , specific_schema AS spec_schema
     , specific_name AS spec_name
     , routine_catalog AS proc_cat
     , routine_schema AS proc_schema
     , routine_name AS proc_name
     , privilege_type AS type
     , grantor
     , is_grantable AS with_grant
  FROM information_schema.routine_privileges;

CREATE OR REPLACE VIEW public.all_proc_privs AS
SELECT grantee
     , specific_catalog AS s_cat
     , SUBSTR(specific_schema, 1, 12) AS spec_schema
     , SUBSTR(specific_name, 1, 25) AS spec_name
     , routine_catalog AS p_cat
     , SUBSTR(routine_schema, 1, 12) AS proc_schema
     , SUBSTR(routine_name, 1, 25) AS proc_name
     , privilege_type AS type
     , grantor
     , is_grantable AS with_grant
  FROM information_schema.role_routine_grants
 UNION
SELECT grantee
     , specific_catalog AS s_cat
     , SUBSTR(specific_schema, 1, 12) AS spec_schema
     , SUBSTR(specific_name, 1, 25) AS spec_name
     , routine_catalog AS p_cat
     , SUBSTR(routine_schema, 1, 12) AS proc_schema
     , SUBSTR(routine_name, 1, 25) AS proc_name
     , privilege_type AS type
     , grantor
     , is_grantable AS with_grant
  FROM information_schema.routine_privileges;

CREATE OR REPLACE VIEW public.all_role_table_privileges AS
SELECT grantee
     , table_catalog AS cat
     , table_schema AS schema
     , table_name AS name
     , privilege_type AS type
     , grantor
     , is_grantable AS with_grant
     , with_hierarchy AS hier
  FROM information_schema.role_table_grants;

CREATE OR REPLACE VIEW public.all_table_grants AS
SELECT grantee
     , table_catalog AS cat
     , table_schema AS schema
     , table_name AS name
     , privilege_type AS type
     , grantor
     , is_grantable AS with_grant
     , with_hierarchy AS hier
  FROM information_schema.role_table_grants;

CREATE OR REPLACE VIEW public.all_role_assignments AS
WITH role_assignments AS (
     SELECT b.rolname, m.member
       FROM pg_catalog.pg_auth_members m
       JOIN pg_catalog.pg_roles b ON m.roleid = b.oid
)
SELECT r.rolname AS username
     , r.rolsuper AS is_superuser
     , r.rolinherit AS is_inherit
     , r.rolcreaterole AS can_create_role
     , r.rolcreatedb AS can_create_db
     , r.rolcanlogin AS can_login
     , r.rolconnlimit AS conn_limit
     , r.rolvaliduntil AS expires
     , r.rolreplication AS can_replicate
     , r.rolbypassrls AS bypass_rls
     , ra.rolname AS granted_role
  FROM pg_catalog.pg_roles r
  JOIN role_assignments ra ON ra.member = r.oid
 WHERE r.rolname !~ '^pg_';

CREATE OR REPLACE VIEW public.all_table_privileges AS
SELECT r.rolname AS username
     , t.schemaname
     , t.tablename
     , has_table_privilege(r.rolname, t.schemaname || '.' || t.tablename, 'select') AS sel
     , has_table_privilege(r.rolname, t.schemaname || '.' || t.tablename, 'insert') AS ins
     , has_table_privilege(r.rolname, t.schemaname || '.' || t.tablename, 'update') AS upd
     , has_table_privilege(r.rolname, t.schemaname || '.' || t.tablename, 'delete') AS del
     , has_table_privilege(r.rolname, t.schemaname || '.' || t.tablename, 'truncate') AS trunc
     , has_table_privilege(r.rolname, t.schemaname || '.' || t.tablename, 'references') AS refer
     , has_table_privilege(r.rolname, t.schemaname || '.' || t.tablename, 'trigger') AS trig
  FROM ( SELECT schemaname, tablename FROM pg_tables
          UNION
         SELECT schemaname, viewname AS tablename FROM pg_views
          UNION
         SELECT schemaname, matviewname AS tablename FROM pg_matviews
       ) t
     , pg_roles r
 WHERE r.rolcanlogin = TRUE
   AND schemaname NOT IN ('pg_catalog', 'information_schema');

CREATE OR REPLACE VIEW public.all_users AS
SELECT pgu.usename AS username
     , pgu.usesysid AS id
     , pgu.usesuper AS superuser
     , pgu.usecreatedb AS createdb
     , pgu.userepl AS replication
     , pgu.usebypassrls AS bypass_rls
     , pgu.valuntil AS expires
     , pgu.useconfig AS userconfig
  FROM pg_catalog.pg_user pgu;

CREATE OR REPLACE VIEW public.routines AS
SELECT *
  FROM information_schema.routines;

CREATE OR REPLACE VIEW public.all_schemas AS
SELECT *
  FROM information_schema.schemata
 WHERE schema_owner NOT IN ('postgres');

CREATE OR REPLACE VIEW public.all_table_constraints AS
SELECT tc.constraint_catalog AS cat
     , tc.constraint_schema AS schema
     , tc.constraint_name AS name
     , tc.constraint_type AS type
     , tc.table_catalog AS tab_cat
     , tc.table_schema AS tab_schema
     , tc.table_name AS tab_name
     , tc.is_deferrable AS defer
     , tc.initially_deferred AS deferred
     , c.constraint
  FROM information_schema.table_constraints AS tc
  LEFT OUTER JOIN (
SELECT constraint_name
     , constraint_catalog
     , constraint_schema
     , check_clause AS constraint
  FROM information_schema.check_constraints
 UNION
SELECT constraint_name
     , constraint_catalog
     , constraint_schema
     , unique_constraint_catalog || '.' || unique_constraint_schema || '.' || unique_constraint_name || ' (UPDATE=' || update_rule || ',DELETE=' || delete_rule || ',MATCH=' || match_option ||')' AS constraint
  FROM information_schema.referential_constraints
 UNION
SELECT constraint_name
     , constraint_catalog
     , constraint_schema
     , domain_catalog || '.' || domain_schema || '.' || domain_name AS constraint
  FROM information_schema.domain_constraints
     ) AS c
    ON c.constraint_name = tc.constraint_name
   AND c.constraint_catalog = tc.constraint_catalog
   AND c.constraint_schema = tc.constraint_schema;

CREATE OR REPLACE VIEW public.all_tab_cons AS
SELECT tc.constraint_catalog || '.' || tc.constraint_schema || '.' || tc.constraint_name AS name
     , CASE
          WHEN tc.constraint_type = 'PRIMARY KEY' THEN 'PK'
          WHEN tc.constraint_type = 'FOREIGN KEY' THEN 'FK'
          WHEN tc.constraint_type = 'CHECK' THEN 'CHK'
          WHEN tc.constraint_type = 'UNIQUE' THEN 'UK'
          ELSE tc.constraint_type
       END AS type
     , tc.table_catalog || '.' || tc.table_schema || '.' || tc.table_name AS tab_name
     , tc.is_deferrable AS defer
     , tc.initially_deferred AS deferred
     , c.constraint
  FROM information_schema.table_constraints AS tc
  LEFT OUTER JOIN (
SELECT constraint_name
     , constraint_catalog
     , constraint_schema
     , check_clause AS constraint
  FROM information_schema.check_constraints
 UNION
SELECT constraint_name
     , constraint_catalog
     , constraint_schema
     , unique_constraint_catalog || '.' || unique_constraint_schema || '.' || unique_constraint_name || ' (UPDATE=' || update_rule || ',DELETE=' || delete_rule || ',MATCH=' || match_option ||')' AS constraint
  FROM information_schema.referential_constraints
 UNION
SELECT constraint_name
     , constraint_catalog
     , constraint_schema
     , domain_catalog || '.' || domain_schema || '.' || domain_name AS constraint
  FROM information_schema.domain_constraints
     ) AS c
    ON c.constraint_name = tc.constraint_name
   AND c.constraint_catalog = tc.constraint_catalog
   AND c.constraint_schema = tc.constraint_schema;
--SELECT * FROM information_schema.table_privileges;

CREATE OR REPLACE VIEW public.all_tab_privs AS
SELECT grantee
     , table_catalog AS cat
     , table_schema AS schema
     , table_name AS tab_name
     , privilege_type AS type
     , grantor
     , is_grantable AS with_grant
     , with_hierarchy AS hier
  FROM information_schema.table_privileges;
--SELECT * FROM information_schema.tables ORDER BY table_catalog, table_schema, table_name;

CREATE OR REPLACE VIEW public.all_tables AS
SELECT table_catalog AS cat
     , table_schema AS schema
     , table_name AS name
     , is_insertable_into AS insert
     , is_typed AS typed
     , commit_action
     , self_referencing_column_name AS self_ref_col_name
     , reference_generation
     , user_defined_type_catalog AS user_def_cat
     , user_defined_type_schema AS user_def_schema
     , user_defined_type_name AS user_def_name
  FROM information_schema.tables
 WHERE table_type = 'BASE TABLE'
   AND table_schema NOT IN ('information_schema', 'pg_catalog');

CREATE OR REPLACE VIEW public.all_tabs AS
SELECT table_catalog AS cat
     , table_schema AS schema
     , table_name AS name
     , is_insertable_into AS ins
     , is_typed AS typed
     , commit_action AS commit
     , self_referencing_column_name AS self_ref
     , reference_generation AS ref_gen
     , user_defined_type_catalog || '.' || user_defined_type_schema || '.' || user_defined_type_name AS user_def_name
  FROM information_schema.tables
 WHERE table_type = 'BASE TABLE';

CREATE OR REPLACE VIEW public.all_foreign_tables AS
SELECT table_catalog AS cat
     , table_schema AS schema
     , table_name AS name
     , is_insertable_into AS insert
     , is_typed AS typed
     , commit_action
     , self_referencing_column_name AS self_ref_col_name
     , reference_generation
     , user_defined_type_catalog AS user_def_cat
     , user_defined_type_schema AS user_def_schema
     , user_defined_type_name AS user_def_name
  FROM information_schema.tables
 WHERE table_type = 'FOREIGN TABLE'
   AND table_schema NOT IN ('information_schema', 'pg_catalog');

CREATE OR REPLACE VIEW public.all_trigger_columns AS
SELECT event_object_catalog AS cat
     , event_object_schema AS schema
     , event_object_table AS tab_name
     , event_object_column AS col_name
     , trigger_catalog AS trig_cat
     , trigger_schema AS trig_schema
     , trigger_name AS trig_name
  FROM information_schema.triggered_update_columns;

CREATE OR REPLACE VIEW public.all_trig_cols AS
SELECT event_object_catalog AS cat
     , event_object_schema AS schema
     , event_object_table AS tab_name
     , event_object_column AS col_name
     , trigger_catalog AS trig_cat
     , trigger_schema AS trig_schema
     , trigger_name AS trig_name
  FROM information_schema.triggered_update_columns;
--SELECT * FROM information_schema.triggers ORDER BY trigger_catalog, trigger_schema, trigger_name, action_timing, event_manipulation, action_orientation;

CREATE OR REPLACE VIEW public.all_triggers AS
SELECT trigger_catalog AS cat
     , trigger_schema AS schema
     , trigger_name AS name
     , action_timing AS timing
     , event_manipulation AS event
     , action_orientation AS each
     , event_object_catalog AS tab_cat
     , event_object_schema AS tab_schema
     , event_object_table AS tab_name
     , action_order
     , action_condition
     , action_statement
     , action_reference_old_table AS old_tab_name
     , action_reference_new_table AS new_tab_name
     , action_reference_old_row AS old_row
     , action_reference_new_row AS new_row
     , created
  FROM information_schema.triggers;

CREATE OR REPLACE VIEW public.all_trigs AS
SELECT trigger_catalog AS cat
     , trigger_schema AS schema
     , trigger_name AS name
     , action_timing AS timing
     , event_manipulation AS event
     , action_orientation AS each
     , event_object_catalog AS t_cat
     , event_object_schema AS t_schema
     , event_object_table AS tab_name
--     , action_order
--     , action_condition
     , action_statement
--     , action_reference_old_table AS old_tab_name
--     , action_reference_new_table AS new_tab_name
--     , action_reference_old_row AS old_row
--     , action_reference_new_row AS new_row
--     , created
  FROM information_schema.triggers;
--SELECT * FROM information_schema.usage_privileges;
--SELECT * FROM information_schema.view_column_usage ORDER BY view_catalog, view_schema, view_name, table_catalog, table_schema, table_name, column_name;

CREATE OR REPLACE VIEW public.all_view_columns AS
SELECT view_catalog AS cat
     , view_schema AS schema
     , view_name AS name
     , table_catalog AS tab_cat
     , table_schema AS tab_schema
     , table_name AS tab_name
     , column_name AS col_name
  FROM information_schema.view_column_usage;

CREATE OR REPLACE VIEW public.all_vw_cols AS
SELECT view_catalog AS cat
     , SUBSTR(view_schema, 1, 12) AS schema
     , view_name AS name
     , table_catalog AS t_cat
     , SUBSTR(table_schema, 1, 12) AS tab_schema
     , table_name AS tab_name
     , column_name AS col_name
  FROM information_schema.view_column_usage;
--SELECT * FROM information_schema.view_table_usage ORDER BY view_catalog, view_schema, view_name, table_catalog, table_schema, table_name;
--SELECT * FROM information_schema.views ORDER BY table_catalog, table_schema, table_name;

CREATE OR REPLACE VIEW public.all_sequences AS
SELECT relname AS name
     , relhaspkey AS pk
     , relhasrules AS rules
     , relhastriggers AS trigs
     , relhassubclass AS subclass
     , relispopulated AS populated
  FROM pg_class
 WHERE relkind = 'S'
   AND relnamespace IN
     ( SELECT oid
         FROM pg_namespace
        WHERE nspname NOT LIKE 'pg_%'
          AND nspname != 'information_schema'
      );

CREATE OR REPLACE VIEW public.all_procs AS
SELECT n.nspname AS schema
     , p.proname AS name
     , OIDVECTORTYPES(p.proargtypes) AS args
     , REPLACE(((((n.nspname::TEXT || '.') || p.proname::TEXT) || '(') || OIDVECTORTYPES(p.proargtypes)) || ')', ' ', '') AS signature
     , t1.typname AS return_type
     , a.rolname AS owner
     , l.lanname AS language
     , p.prosrc AS body
  FROM pg_proc p
  LEFT JOIN pg_namespace n ON n.oid = p.pronamespace
  LEFT JOIN pg_type t1 ON p.prorettype = t1.oid
  LEFT JOIN pg_roles a ON p.proowner = a.oid
  LEFT JOIN pg_language l ON p.prolang = l.oid
 WHERE a.rolname NOT IN ('rdsadmin');

CREATE OR REPLACE VIEW public.all_sessions AS
SELECT usename AS user_name
     , application_name AS app_name
     , client_addr
     , pid
     , DATE_TRUNC('second', backend_start) AS login_datetime
     , DATE_TRUNC('second', AGE(NOW(), xact_start)) AS xact_elapsed
     , DATE_TRUNC('second', AGE(NOW(), query_start)) AS query_elapsed
     , DATE_TRUNC('second', AGE(NOW(), DATE_TRUNC('second', backend_start))) AS login_time
--     , CASE waiting WHEN 't' THEN 'WAIT' ELSE 'BUSY' END AS wait -- v9.5-
     , state -- v9.6+
     , REGEXP_REPLACE(query, '[ \t\n]+', ' ', 'g') AS query
  FROM pg_stat_activity
 WHERE usename NOT IN ('rdsadmin')
    OR query != '<insufficient privilege>';

CREATE OR REPLACE VIEW public.user_sessions AS
SELECT usename AS user_name
     , application_name AS app_name
     , client_addr
     , pid
     , DATE_TRUNC('second', backend_start) AS login_datetime
     , DATE_TRUNC('second', AGE(NOW(), xact_start)) AS xact_elapsed
     , DATE_TRUNC('second', AGE(NOW(), query_start)) AS query_elapsed
     , DATE_TRUNC('second', AGE(NOW(), DATE_TRUNC('second', backend_start))) AS login_time
--     , CASE waiting WHEN 't' THEN 'WAIT' ELSE 'BUSY' END AS wait -- v9.5-
     , state -- v9.6+
     , REGEXP_REPLACE(query, '[ \t\n]+', ' ', 'g') AS query
  FROM pg_stat_activity
 WHERE usename = CURRENT_USER;

CREATE OR REPLACE VIEW public.my_sessions AS
SELECT usename AS user_name
     , application_name AS app_name
     , client_addr
     , pid
     , DATE_TRUNC('second', backend_start) AS login_datetime
     , DATE_TRUNC('second', AGE(NOW(), xact_start)) AS xact_elapsed
     , DATE_TRUNC('second', AGE(NOW(), query_start)) AS query_elapsed
     , DATE_TRUNC('second', AGE(NOW(), DATE_TRUNC('second', backend_start))) AS login_time
--     , CASE waiting WHEN 't' THEN 'WAIT' ELSE 'BUSY' END AS wait -- v9.5-
     , state -- v9.6+
     , REGEXP_REPLACE(query, '[ \t\n]+', ' ', 'g') AS query
  FROM pg_stat_activity
 WHERE
     ( usename NOT IN ('rdsadmin')
    OR query != '<insufficient privilege>'
     )
   AND client_addr IN
     ( SELECT client_addr
         FROM pg_stat_activity
        WHERE query = CURRENT_QUERY()
          AND usename = CURRENT_USER
     );

CREATE OR REPLACE VIEW public.all_sess AS
SELECT usename AS user_name
     , SUBSTRING(application_name FROM 1 FOR 20) AS app_name
     , client_addr
     , pid
     , DATE_TRUNC('second', AGE(NOW(), DATE_TRUNC('second', backend_start))) AS login_time
     , state
     , REGEXP_REPLACE(query, '[ \t\n]+', ' ', 'g') AS query
  FROM pg_stat_activity
 WHERE usename NOT IN ('rdsadmin')
    OR query != '<insufficient privilege>';

CREATE OR REPLACE VIEW public.all_locks AS
SELECT a.datname AS database
     , c.relname AS blocked_object
     , l.transactionid AS xact_id
     , l.mode
     , l.granted
     , a.usename AS user_name
     , l.pid
     , DATE_TRUNC('second', a.query_start) AS query_datetime
     , DATE_TRUNC('second', AGE(NOW(), a.query_start)) AS age
     , REGEXP_REPLACE(a.query, '[ \t\n]+', ' ', 'g') AS blocking_statement
  FROM pg_locks l
  JOIN pg_stat_activity a ON a.pid = l.pid
  JOIN pg_class c ON c.oid = l.relation
 WHERE a.query NOT IN ('<insufficient privilege>')
   AND
     ( usename != CURRENT_USER
    OR AGE(NOW(), a.query_start) > interval '0 second'
     );

CREATE OR REPLACE VIEW public.all_vacuum AS
SELECT schemaname AS schema_name
     , relname AS tab_name
     , last_vacuum
     , last_autovacuum
     , last_analyze
     , last_autoanalyze
  FROM pg_stat_all_tables
 WHERE schemaname NOT IN ('public', 'pg_toast', 'pg_catalog', 'information_schema');

CREATE OR REPLACE VIEW public.all_functions AS
SELECT n.nspname AS schema
     , r.rolname AS owner
     , p.proname AS name
     , pg_catalog.pg_get_function_arguments(p.oid) AS args
     , pg_catalog.pg_get_function_result(p.oid) AS returns
     , CASE
          WHEN p.proisagg THEN 'agg'
          WHEN p.proiswindow THEN 'window'
          WHEN p.prorettype = 'pg_catalog.trigger'::PG_CATALOG.REGTYPE THEN 'trigger'
          ELSE 'normal'
       END AS type
 FROM pg_catalog.pg_proc p
 LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
 LEFT JOIN pg_roles r ON n.nspowner = r.oid
WHERE pg_catalog.pg_function_is_visible(p.oid)
  AND n.nspname NOT IN ('pg_catalog', 'information_schema');

CREATE OR REPLACE VIEW public.all_databases
    AS
SELECT datname AS database
  FROM dba_databases
 WHERE datname NOT IN ('template0', 'template1');

CREATE OR REPLACE VIEW public.devops_version
    AS
SELECT version();

CREATE OR REPLACE VIEW devops_replication_status
    AS
SELECT client_addr
     , state
     , sent_location
     , write_location
     , flush_location
     , replay_location
  FROM pg_stat_replication;

CREATE OR REPLACE VIEW devops_user_roles
    AS
  WITH RECURSIVE cte
    AS
     ( SELECT pg_roles.oid
            , pg_roles.rolname AS role_name
            , pg_roles.rolname as granted_to
         FROM pg_roles
        WHERE pg_roles.rolname = CURRENT_USER
        UNION ALL
       SELECT m.roleid
            , pgr.rolname AS role_name
            , pgr2.rolname AS granted_to
         FROM cte cte_1
         JOIN pg_auth_members m ON m.member = cte_1.oid
         JOIN pg_roles pgr ON pgr.oid = m.roleid
         join pg_roles pgr2 ON pgr2.oid = m.member
     )
SELECT DISTINCT granted_to, role_name
  FROM cte
 ORDER BY granted_to, role_name;
